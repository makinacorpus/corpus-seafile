#
# This file contains default values which are used
# by the salt states deploying your project.
# you may copy them to your relevant PILLAR file
# before editing them.
# If you need to add variables, this is where to begin.
# Please keep defaults in there, but real passwords
# must be putted inside pillar
#
# replace project_name in your pillar by
# the current projectname
# you can also merge parts of this file
# with the relevant pillar


makina-projects.projectname:
  data:
    MEDIA_URL: '/media/'
    # version: "4.2.2"
    # app_url_hash: "md5=ffd61e4cbee0c295376fda4697263345"
    # version: "6.0.3"
    # app_url_hash: "md5=21b2f10b3ad41f4e5f5c5bfd43d64d17" 
    # version: "{ver_major}.3.2"
    # app_url_hash: "md5=7a81e559d77d7fa306b0dab35c9f5869"
    version: "{ver_major}.3.4"
    app_url_hash: "md5=29b703d787ed3b8135c5d40c22493d18"
    ver_major: "6"
    searoot: "{data_root}/root"
    pointer: "{app_download_root}/seafile-server-latest"
    app_root: "{pointer}/seahub"
    app_download_dir: "{app_root}"
    app_url_type: file
    app_url_tar_opts: "xzvf"
    app_url_archive_format: tar
    #app_url_hash: "md5=d19cb14808b41274a1e22938748e4829"
    app_download_root: "{data_root}/server_{version}"
    cur_ver_dir: "{app_download_root}/seafile-server-{version}"
    app_archive_test_exists: "test ! -e {cur_ver_dir}/setup-seafile.sh"
    app_url: "http://download.seadrive.org/seafile-server_{version}_{arch}.tar.gz"
    #app_url: "https://bintray.com/artifact/download/seafile-org/seafile/seafile-server_{version}_{arch}.tar.gz"
    #app_url: "https://bitbucket.org/haiwen/seafile/downloads/seafile-server_{version}_{arch}.tar.gz"
    arch: "x86-64"
    seafile_mysql_host: 127.0.0.1
    seafile_mysql_port: 3306
    seafile_mysql_db: seafile
    seafile_mysql_user: seafile
    seafile_mysql_pw: seafile
    ccnet_mysql_host: 127.0.0.1
    ccnet_mysql_port: 3306
    ccnet_mysql_db: ccnet
    ccnet_mysql_user: ccnet
    ccnet_mysql_pw: ccnet
    ccnet_conf:
      #LDAP:
      #  HOST: ldap://ldap.example.com
      #  BASE: ou=users,dc=example,dc=com
      #  USER_DN: cn=seafileadmin,dc=example,dc=com
      #  PASSWORD: secret
      #  LOGIN_ATTR: mail
      General:
        SERVICE_URL: "https://{domain}:443"
        NAME: "seafile"
        USER_NAME: "seafile"
      Network:
        PORT: 10002
      Client:
        PORT: 13419
        UNIX_SOCKET: "{app_download_root}/ccnet/ccnet.sock"
      Database:
        ENGINE: 'mysql'
        HOST: "{ccnet_mysql_host}"
        PORT: "{ccnet_mysql_port}"
        USER: "{ccnet_mysql_user}"
        PASSWD: "{ccnet_mysql_pw}"
        DB: "{ccnet_mysql_db}"
        CONNECTION_CHARSET: 'utf8'
    seafile_conf:
      network:
        port: 12001
      fileserver:
        port: 8082
      database:
        type: mysql
        host: "{seafile_mysql_host}"
        port: "{seafile_mysql_port}"
        user: "{seafile_mysql_user}"
        password: "{seafile_mysql_pw}"
        db_name: "{seafile_mysql_db}"
        connection_charset: 'utf8'
    seafile_ini:
      database:
        type: mysql
        host: "{seafile_mysql_host}"
        port: "{seafile_mysql_port}"
        user: "{seafile_mysql_user}"
        password: "{seafile_mysql_pw}"
        db_name: "{seafile_mysql_db}"
        connection_charset: 'utf8'
    seafdav_conf:
      WEBDAV:
        enabled: "true"
        port: 8080
        fastcgi: "true"
        share_name: /seafdav
    # we use later another django site module
    # which must live out of ./seahub as it import
    # modules that needs to be first added
    # to sys.path
    # and some env var should be setted first
    SEAFILE_DJANGO_SETTINGS_MODULE: "seahub.settings"
    #
    #
    # corpus-django common settings
    PROJECT: seafile
    # leave it out of seahub as seahub/__init__ is not
    # importable at first, there is magic
    configs:
      "logo.png":
        target: "{cur_ver_dir}/seahub/media/custom/logo.png"
      "logrotate.conf":
        target: "/etc/logrotate.d/seafile-{name}"
      "seafile-wrapper.sh":
        source: "salt://makina-projects/{name}/files/{ver_major}/seafile-wrapper.sh"
        target: "{cur_ver_dir}/seafile-wrapper.sh" 
      "fastcgi_params_common":
        source: "salt://makina-projects/{name}/files/fastcgi_params_common"
        target: "/etc/nginx/fastcgi_params_common"
        mode: 644
        user: root
        group: root
      "seafile.sh":
        source: "salt://makina-projects/{name}/files/{ver_major}/seafile.sh"
        target: "{cur_ver_dir}/seafile.sh"
      {# django app #}
      "seahub/seahub_wsgi.py":
        source: "salt://makina-projects/{name}/files/{ver_major}/seahub/seahub_wsgi.py"
        target: "{cur_ver_dir}/seahub/seahub_wsgi.py"
      "seahub/seahub_dsm.py":
        source: "salt://makina-projects/{name}/files/{ver_major}/seahub/seahub_dsm.py"
        target: "{cur_ver_dir}/seahub/seahub_dsm.py"
      {# daemons #}
      "conf/seafdav.conf":
        source: "salt://makina-projects/{name}/files/{ver_major}/conf/seafdav.conf"
        target: "{app_download_root}/conf/seafdav.conf"
      {# some files have different place depending on version #}
      # after 5 location
      "aseahub_settings.py":
        source: "salt://makina-projects/{name}/files/{ver_major}/config.py"
        target: "{app_download_root}/conf/seahub_settings.py"
        mode: 640
      "asettings_local2.py":
        source: "salt://makina-projects/{name}/files/{ver_major}/config.py"
        target: "{app_download_root}/conf/seahub_settings_2.py"
        mode: 640
      "a{seafile.conf":
        source: "salt://makina-projects/{name}/files/{ver_major}/seafile.conf"
        target: "{app_download_root}/conf/seafile.conf"
      "accnet/ccnet.conf":
        source: "salt://makina-projects/{name}/files/{ver_major}/ccnet/ccnet.conf"
        target: "{app_download_root}/conf/ccnet.conf"
      "aconf/seafile.ini":
        source: "salt://makina-projects/{name}/files/{ver_major}/ccnet/seafile.ini"
        target: "{app_download_root}/conf/seafile.ini"
      # pre 5 location
      "seahub_settings.py":
        source: "salt://makina-projects/{name}/files/{ver_major}/config.py"
        target: "{pointer}/seahub/seahub_settings.py"
        mode: 640
      "seahub_settings_2.py":
        source: "salt://makina-projects/{name}/files/{ver_major}/config.py"
        target: "{pointer}/seahub/seahub_settings_2.py"
        mode: 640
      "seafile.conf":
        source: "salt://makina-projects/{name}/files/{ver_major}/seafile.conf"
        target: "{data_root}/seafile-data/seafile.conf"
      "ccnet/ccnet.conf":
        source: "salt://makina-projects/{name}/files/{ver_major}/ccnet/ccnet.conf"
        target: "{app_download_root}/ccnet/ccnet.conf"
      "ccnet/seafile.ini":
        source: "salt://makina-projects/{name}/files/{ver_major}/ccnet/seafile.ini"
        target: "{app_download_root}/ccnet/seafile.ini"
    pre_5_configs:
      - "{cur_ver_dir}/seahub_settings.py"
      - "{app_download_root}/seahub_settings.py"
      - "{app_download_root}/ccnet/ccnet.conf"
      - "{data_root}/seafile-data/seafile.conf"
    htaccess: "/etc/{name}.webaccess"
    py: "{py_root}/bin/python"
    py_root: "{project_root}/venv"
    media_source: "{media}"
    domain: "{fqdn}"
    requirements: "{project_root}/requirements.{version}.txt"
    server_aliases: []
    force_ssl: true
    #disabled_urls []
    #ldap_url: "ldap://ldap.net/dc=m,dc=com?uid?sub?(objectClass=person)"
    #admin_url: /admin
    #admin_allowed_ips :[]
    DJANGO_SETTINGS_MODULE: "seahub_dsm"
    WSGI: "seahub_wsgi:application"
    nginx_loglevel: "crit"
    nginx_upstreams: salt://makina-projects/{name}/files/nginx.upstreams.conf
    nginx_vhost: salt://makina-projects/{name}/files/nginx.content.conf
    adminmail: "root@{domain}"
    #ftp_ip: "x.x.x.x"
    #ftp_port_range: "22300 22400"
    #ftp_users:
    #  - ftpuser: {'password': 'xxx', "home": "{data_root}/foo"}
    admins:
      {% for i in ['sysadmin'] %}
      - {{i}}:
          mail: "{{i}}+{name}@{fqdn}"
          password: {{salt['mc_utils.generate_stored_password'](
                             'corpus-django_web_admine'+i)}}
      {%endfor %}
    media: "{app_root}/media"
    static: "{media}/assets"
    host: localhost
    port: 8000
    workers: 10
    worker_class: sync
    worker_timeout: 9000
    compile_messages: false
    collect_static: false
    do_syncdb: true
    do_migrate: false
    do_syncdb_only_first_time: true
    create_admins: false
    reset_admins_passwords: false
    # http_users:
    #   - root: foo
    # extra django settings to add
    # to the file
    fixperms_cron_periodicity: "0 */2 * * *"
    django_settings:
      # order is important
      FILE_SERVER_ROOT: "https://{domain}/seafhttp"
      SITE_BASE: 'https://{domain}'
      SITE_NAME: 'Seafile'
      ADMINS: "placeholder (totally computed)"
      SITE_ID: 1
      DATABASES:
        default:
          ENGINE: 'django.db.backends.mysql'
          USER: '{name}'
          PORT: 3306
          HOST: '127.0.0.1'
          NAME: 'db'
          PASSWORD: '{name}secret'
          OPTIONS:
            init_command: 'SET storage_engine=INNODB'
      EMAIL_HOST: "localhost"
      DEFAULT_FROM_EMAIL: 'Seafile <{adminmail}>'
      SERVER_EMAIL: 'root@{fqdn}'
      MEDIA_ROOT: '{media}/'
      STATIC_ROOT: '{static}/'
      COMPRESS_ROOT: '{media}/'
      LANGUAGE_CODE: fr
      DATE_FORMAT: 'iso-8601'
      ALLOWED_HOSTS:
        - localhost
        - 127.0.0.1
        - "{domain}"
        - "{fqdn}"
        - "10.5.0.1"
      LOGO_PATH: 'custom/logo.png'
      LOGO_WIDTH: 213
      LOGO_HEIGHT: 75
      CORS_ORIGIN_ALLOW_ALL: True
      # Internationalization
      # https://docs.djangoproject.com/en/1.6/topics/i18n/
      TIME_ZONE: 'Europe/Paris'
      DEBUG: False
      TEMPLATE_DEBUG: False
      USE_X_FORWARDED_HOST: True
      CACHES:
        default:
          BACKEND: 'django.core.cache.backends.memcached.MemcachedCache'
          LOCATION: '127.0.0.1:11211'
      USER_MODULE: django.contrib.auth.models
      USER_CLASS: User
      SECRET_KEY: "{{salt['mc_utils.generate_stored_password'](
                             'corpus-django_web_secret_key', 64)}}"
      LOGGING:
        version: 1
        disable_existing_loggers: False
        filters:
          require_debug_false:
            '()': django.utils.log.RequireDebugFalse
        handlers:
          mail_admins:
            level: 'ERROR'
            class: django.utils.log.AdminEmailHandler
          console:
            level: 'DEBUG'
            class: 'logging.StreamHandler'
        loggers:
          '':
            handlers: ['console']
            level: 'DEBUG'
            propagate: False
          django.request:
             handlers: ['console', 'mail_admins']
             level: 'ERROR'
             propagate: True
          django:
             handlers: ['console', 'mail_admins']
             level: 'ERROR'
             propagate: True
      LANGUAGES:
       - "('fr', _('French'))"
       - "('en', _('English'))"
       - "('it', _('Italia'))"
      # Absolute filesystem path to the directory that will hold thumbnail files.
      THUMBNAIL_ROOT: '{data_root}/seafile-data/thumbnail/thumb/'
      THUMBNAIL_EXTENSION: 'png'
      THUMBNAIL_DEFAULT_SIZE: '24'
      PREVIEW_DEFAULT_SIZE: '100'
      # Enable cloude mode and hide `Organization` tab.
      CLOUD_MODE: True
      # Enalbe or disalbe registration on web. Default is `False`.
      ENABLE_SIGNUP: True
      # Activate or deactivate user when registration complete. Default is `True`.
      # If set to `False`, new users need to be activated by admin in admin panel.
      ACTIVATE_AFTER_REGISTRATION: False
      # Whether to send email when a system admin adding a new member. Default is `True`.
      # NOTE: since version 1.4.
      SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER: True
      SEND_EMAIL_ON_RESETTING_USER_PASSWD: True
      # Attempt limit before showing a captcha when login.
      LOGIN_ATTEMPT_LIMIT: 3
      # Whether a user's session cookie expires when the Web browser is closed.
      SESSION_EXPIRE_AT_BROWSER_CLOSE: False
      SERVE_STATIC: True
      STATIC_URL: '{MEDIA_URL}assets/'
      MEDIA_URL: '{MEDIA_URL}'
      COMPRESS_URL: '{MEDIA_URL}'
      COMPRESS_ENABLED: True
      #ADDITIONAL_TEMPLATE_DIRS:
      #  - '{project_root}/calanques'
      # add custom extra_settings which will be processed at end only
      #extra_django_settings:
      #  FOO: bar
      #  BAR: true
      # settings rendered as is (not via the macro
      #extra_settings:
      #  FOO: "'bar'"
      #  BAR: "True"
  env_defaults:
    dev:
      django_settings:
        DEBUG: True
# vim:set ft=sls:
